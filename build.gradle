plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.181'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

version = mod_version
group = mod_group_id

repositories {
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://modmaven.dev" }
    maven { url "https://maven.terraformersmc.com/" }

    maven {
        name "OctoStudios"
        url "https://maven.octo-studios.com/releases"
    }

    maven {
        url "https://maven.squiddev.cc/"
        content {
            includeGroup("cc.tweaked")
        }
    }

    flatDir {
        dir 'libs'
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        arguments '--nogui'

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        arguments '--nogui'

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    junit {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    clientData {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }

    serverData {
        // Change run folder location
        workingDirectory project.file('run')
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // REI integration
    compileOnly 'me.shedaniel.cloth:basic-math:0.6.1'
    compileOnly "dev.architectury:architectury-neoforge:18.0.3"
    compileOnly 'me.shedaniel:RoughlyEnoughItems-neoforge:20.0.811'
    compileOnly "me.shedaniel:REIPluginCompatibilities-forge-annotations:12.+"

    // JEI integration
    compileOnly "mezz.jei:jei-1.21.9-common-api:25.0.1.4"
    compileOnly "mezz.jei:jei-1.21.9-neoforge-api:25.0.1.4"

    // EMI integration
    compileOnly "dev.emi:emi-neoforge:1.1.15+1.21.1:api"

    // Curios Continuation integration
    compileOnly "top.theillusivec4.curios:curios-neoforge:11.0.1+1.21.5"

    // CCTweaked integration
    compileOnly "cc.tweaked:cc-tweaked-1.21.8-core-api:1.116.1"
    compileOnly "cc.tweaked:cc-tweaked-1.21.8-forge-api:1.116.1"

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "energizedpower",
                "Specification-Vendor"    : "JDDev0",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "JDDev0",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.publishUnified {
    dependsOn tasks.getByName("build")
}

unifiedPublishing {
    project {
        displayName = "Energized Power - " + project.minecraft_version + " - v" + project.mod_version.split("-")[1] + " [NeoForge]"
        version = project.mod_version
        changelog = new File("CHANGELOG.md").exists()?new File("CHANGELOG.md").getText("UTF-8"):""
        releaseType = "beta" //TODO change to "release" if NeoForge is no longer in beta
        gameVersions = [project.minecraft_version]
        gameLoaders = ["neoforge"]

        mainPublication.set(project.rootDir.toPath().resolve("build/libs").resolve(project.mod_id + "-" + project.version + ".jar").toFile())

        relations {
            //No dependencies
        }

        if(project.hasProperty('MODRINTH_TOKEN')) {
            modrinth {
                token = getProperty('MODRINTH_TOKEN') as String
                id = "6pku8gW1"
            }
        }

        if(project.hasProperty('CURSEFORGE_TOKEN')) {
            curseforge {
                token = getProperty('CURSEFORGE_TOKEN') as String
                id = "782147"
            }
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
